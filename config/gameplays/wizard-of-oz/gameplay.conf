#
# the rules file is processed after each individual event is processes,
# the rules will allow for more complicated gameplays rather than just
# the single event/action processing
#
# the name of the rule is just a logical name for reference and not used
# in any processing, the rule names need not be unique, e.g. there may
# be multiple rules that are names 'shoot-again'
#
# each module can have an event, state, and action, there are also global
# states and actions defined that are not associated with a particular module,
# the various states, for both modules and global, can be specified as 'transient'
# or 'persistent', a 'transient' state is only valid for the duration of that
# particular ball play, the item is reset to it's default state upon ball drain,
# a 'persistent' state will be valid for the remaining duration of the game
#
# global.shoot-again
# global.drain-multiplier
# global.drain-bonus
# global.game-over-multiplier
# global.game-over-bonus
# global.multi-ball
#
# the format to specify a state to check is:
#
# <module>.<state>:<value>
#
# where:
#   module - name of the module to check
#   state  - name of the state item to check
#   value  - value to check against
#
# the valid state names are:
#   
#   ball-events  - the number of module events for this ball
#   ball-score   - the module score for this ball
#   total-events - the total number of module events
#   total-score  - the total module score
#   active       - if device is active or not (yes or no),
#   state        - one of the persistent stated for this module
   
#

# specifying an event list is optional, the states of various modules
# can be evaluated and corresponding actions specified if the states
# are set as specified
rule=enable-shoot-again
states=drop-target1.state:down,drop-target2.state:down
actions=rollover1.active:transient,rollover1.command:light-on

# having multiple events specifies that any one of them can trigger
# the optional states processing and corresponding actions
rule=enable-shoot-again
events=target1,target2
states=target1.state:light-on,target2.state:light-on
actions=rollover1.active:transient,rollover1.command:light-on,target1.command:light-off,target2.command:light-off

# specifying states is optional, an event (or event list) can trigger multiple actions
rule=enable-skill-shot
events=rollover1
actions=bumper1.points:1000:transient,bumper2.points:1000:transient,bumper3.points:1000:transient,bumper4.points:1000:transient
actions=global.sound-file:skill-shot.mp3

rule=shoot-again
events=rollover1
states=rollover1.active
actions=global.shoot-again,rollover1.inactive:persistent,rollover1.command:light-off
actions=global.image-file:tin-man-dancing-boom-box-resize.gif
actions=global.sound-file:free-ball.mp3

rule=enable-drain-multiplier
states=drop-target1.state:down,drop-target2.state:down
actions=global.drain-multiplier:10:persistent,global.drain-bonus:5000:transient

# an event group specifies that all the specified events must all happen
# contiguously, i.e. no intervening events, not not necessarily in order
rule=big-bonus
group=bumper1,bumper2
actions=global.drain-multiplier:1000:persistent,global.game-over-multiplier:1000
actions=global.image-file:tin-man-fuck-you-resize.gif
actions=global.sound-file:reading-that-right.mp3

# an event sequence specifies that all the specified events must happen in the order specified
rule=bigger-bonus
sequence=bumper3,bumper4
actions=global.drain-multiplier:10000:persistent,global.game-over-multiplier:10000
actions=global.image-file:tin-man-falling-resize.gif
actions=global.sound-file:cant-get-up.mp3

rule=reset-bunnies
states=drop-target1.state:down,drop-target2.state:down,drop-target3.state:down
actions=drop-target1.command:up,drop-target2.command:up,drop-target3.command:up
actions=global.image-file:scarecrow-dancing-resize.gif
actions=global.sound-file:so-happy.mp3

rule=multi-ball
states=rollover1.ball-events:20
actions=global.multi-ball:3
